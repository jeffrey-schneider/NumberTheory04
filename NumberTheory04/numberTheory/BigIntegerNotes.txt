//	public static List<Integer> getPrimeFactors(BigInteger v){
//		List<Integer> retVal = new ArrayList<>();
//		BigInteger ourNumber = v;
//		for(BigInteger bigInt = BigInteger.TWO; bigInt.compareTo(v)<0; bigInt = bigInt.add(BigInteger.ONE)) {
//			while(!BigInteger.ZERO.equals(bigInt)) {
//				
//			}
//
//		}

public static BigInteger getCatalan(int v) {
		BigInteger catA = NumberTheory.getFactorial(2 * v);
		BigInteger catB = NumberTheory.getFactorial(v + 1);
		BigInteger catC = NumberTheory.getFactorial(v);
		BigInteger catFinal = catA.divide(catB.multiply(catC));
		return catFinal;
	}

	public static List<BigInteger> getFibonacciList(int v) {
		BigInteger num1 = BigInteger.ZERO;
		BigInteger num2 = BigInteger.ONE;
		int counter = 0;
		List<BigInteger> retList = new ArrayList<>();

		// Iterate until counter == aNumber
		while (counter < v) {
			retList.add(num1);
			BigInteger num3 = num2.add(num1);
			num1 = num2;
			num2 = num3;
			counter++;
		}
		return retList;
	}
	
	
// https://www.quora.com/How-do-I-calculate-4-1-5-without-using-a-calculator
	// Calculating pow(number, 1.5);
	public static List<BigInteger> getJugglersBigInteger(int v){
		BigInteger counter = BigInteger.valueOf(v);
		List<BigInteger> retVal = new ArrayList<>();
		retVal.add(BigInteger.valueOf(v));				
		while(!BigInteger.ONE.equals(counter)) {
			if(!counter.mod(new BigInteger("2")).equals(BigInteger.ZERO)) {		
				BigInteger cube = counter.pow(3);				
				counter = cube.sqrt();
			}else {				
				counter = counter.sqrt();
			}
			retVal.add(counter);			
		}
		return retVal;
	}